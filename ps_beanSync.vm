##-----------------------------------------------------------------------------
## COPYRIGHT 2017, Radware Ltd. All Rights Reserved 
## THE USE, COPY OR INSTALLATION OF THIS/THESE FILE/FILES IS SUBJECT 
## TO THE RADWARE "END USER LICENSE AGREEMENT" A COPY OF WHICH 
## IS PROVIDED WITH THE PACKAGE THAT INCLUDES THIS FILE/FILES AND 
## CAN ALSO BE ACCESSED AT  http://www.radware.com/Resources/eula.html
## Author = Yaron Antebi
## Bean Synchronizer
##-----------------------------------------------------------------------------
#property('summary', 'Sync Two Devices Bean [2020-01-20 10:00]')

#*
Ver 1.1 - September 2019, added support for black\white list.
Ver 1.2 - Jan 2020,  added support for RsProtectedSslObjEntry, excluding cert support.
Ver 1.3 - April 2020,  added support for un-aligned network class sub index.
*#

#*
#device($sourceDp, 'type=defensePro', 'prompt=DefensePro Source Device', 'lazyConnect=true')
#device($devices, 'type=defensePro[]', 'prompt=DefensePro Destintation Devices', 'lazyConnect=true')
#set($_FIELDS_TO_SKIP = ['serialVersionUID','modifiedList'])
##device($defensePro, 'type=defensePro[]')
#param($beansToCreate, 'type=object','out')
#param($beansToUpdate, 'type=object','out')
#param($beansToDelete, 'type=object','out')
#param($matchedDestBeansIndex, 'type=object','out')
#param($DBG, 'type=bool','in')
#param($destDeviceBeans, 'type=object','out')

#set($BEANS_TO_SYNC_META=[
{'name':'RsProtectedSslObjEntry','fieldsToCompare': ['objName'],'fieldsToSkip':[],'beanIndexProperties':{},'shouldDelete': true}
])

##{'name':'RsIDSImmediateChecksAttackEntry','fieldsToCompare': ['iDSImmChkId'],'fieldsToSkip':[],'beanIndexProperties':{},'shouldDelete': true},
##{'name':'RsBWMAppPortGroupEntry','fieldsToCompare': ['name', 'fromPort', 'toPort'],'fieldsToSkip':[],'beanIndexProperties':{},'shouldDelete': true},
##{'name':'RsIDSSynAttackEntry','fieldsToCompare': ['iDSSYNAttackName'],'fieldsToSkip':['iDSSYNAttackId'],'beanIndexProperties':{'iDSSYNAttackId':'0'},'shouldDelete': true},
##{'name':'RsIDSSynProfilesEntry','fieldsToCompare': ['name', 'serviceName'],'fieldsToSkip':['serviceId'],'beanIndexProperties':{'serviceId':'0'},'shouldDelete': true}



##syncBeans($BEANS_TO_SYNC_META, $defensePro[0], $defensePro[1])

*#


#*
#set($BEANS_TO_SYNC_META=[
{'name':'RsBWMNetworkEntry','fieldsToCompare': ['name','mode','fromIP','toIP','mask','address'],'fieldsToSkip':['subIndex','status'],'beanIndexProperties':{},'shouldDelete': true},
{'name':'RsNewBlackListEntry','fieldsToCompare': ['name'],'fieldsToSkip':['action'],'beanIndexProperties':{},'shouldDelete': true},
{'name':'RsNewWhiteListEntry','fieldsToCompare': ['name'],'fieldsToSkip':['action'],'beanIndexProperties':{},'shouldDelete': true}
])
*#



#set($STRING = 'class java.lang.String')
#set($INT = 'class java.lang.Integer')
#set($BYTE = 'class [B')

#set($beansToCreate = [])
#set($beansToUpdate = [])

#*
#set($DBG = false)
#foreach($importDevice in $devices)
	#syncBeans($BEANS_TO_SYNC_META, $sourceDp, $importDevice)
#end
*#

#macro(syncBeans, $BEANS_TO_SYNC_META, $srcDevice, $destDevice)
	#set($beansToDelete = [])
	#foreach($bean in $BEANS_TO_SYNC_META)
		#set($fieldsToSkip = [])
		#set($fieldsToSkipLowerCase = [])
		#set($dummy = $fieldsToSkip.addAll($_FIELDS_TO_SKIP))
		#set($dummy = $fieldsToSkip.addAll($bean.get('fieldsToSkip')))
		#foreach($field in $fieldsToSkip)
			#set($dummy = $fieldsToSkipLowerCase.add($field.toLowerCase()))
		#end
		##log("entering getbeans for bean class - $bean.get('name')")
		#set($matchedDestBeansIndex = [])
		#set($newBean = $srcDevice.newBean($bean.get('name')))
		#set($srcDeviceBeans = $srcDevice.readAll($newBean))
		#set($newBean = $destDevice.newBean($bean.get('name')))
		#set($destDeviceBeans = $destDevice.readAll($newBean))    
		#if($srcDeviceBeans.isEmpty())
			#log("$srcDevice beans are empty no need to copy anything, just delete $destDevice beans for class $bean.get('name') if any")
			#if(!$destDeviceBeans.isEmpty() && $bean.get('shouldDelete'))
				#set($dummy = $beansToDelete.addAll(0, $destDeviceBeans))
			#end
			##break
		#end
		#if($destDeviceBeans.isEmpty() && !$srcDeviceBeans.isEmpty())
			#log('info', 'device B is empty, copy all beans from device A')
			#set($dummy = $beansToCreate.add($srcDeviceBeans))
			#foreach($beanA in $srcDeviceBeans)
				#createBean($bean.get('name'), $bean.get('beanIndexProperties'), $beanA, $srcDevice, $destDevice, $DBG)
			#end
			##break
		#end
		##Compare step
		#if(!$srcDeviceBeans.isEmpty() && !$destDeviceBeans.isEmpty())
			#foreach($beanA in $srcDeviceBeans)
				#foreach($beanB in $destDeviceBeans)
					#set($beanFound = false)
					#set($fieldsMatched = true)
					
					#foreach($field in $bean.get('fieldsToCompare'))
						#set($cmd1 = '#set($fieldToVerifyA = $beanA.' + $field + ')')
						#evaluate($cmd1)
						#set($cmd2 = '#set($fieldToVerifyB = $beanB.' + $field + ')')
						#evaluate($cmd2) 
						#if($bean.get('name') == "RsBWMNetworkEntry" && ($field == "fromIP" || $field == "toIP" || $field == "address"))
								#set($fieldToVerifyA = $ipAddress.addressToString($fieldToVerifyA))
								#set($fieldToVerifyB = $ipAddress.addressToString($fieldToVerifyB))
						#end
						#if($fieldToVerifyA != $fieldToVerifyB)
							#set($fieldsMatched = false)
							#break
						#end
					#end  ##end of foreach in line 105
					#if($fieldsMatched)
						#set($dummy = $matchedDestBeansIndex.add($foreach.index))
						#set($beanFound = true)
						#if($bean.get('name') != "RsBWMNetworkEntry")
						##log("bean.get = ${bean.get('name')}")
						#set($result = [-1])
						#equal($beanA, $beanB, $result, $srcDevice, $destDevice)
						##log("what is the result of deepEqual? for bean $beanA $result[0]")
						#if(!$result[0])
							#set($dummy = $beansToUpdate.add($beanB))
							#updateBean($beanA, $beanB, $srcDevice, $destDevice, 'update', $DBG)
						#end
						#end
						#break
					#end     ##end of if in line 109  
				#end ##end of foreach in destbeans
				#if(!$beanFound)
					#set($dummy = $beansToCreate.add($beanA))
					#createBean($bean.get('name'), $bean.get('beanIndexProperties'), $beanA, $srcDevice, $destDevice, $DBG)
				#end     
			#end ## end of foreach in srcbeans
		#end
		#if($matchedDestBeansIndex.isEmpty() && !$destDeviceBeans.isEmpty() && !$DBG && $bean.get('shouldDelete'))
			#log("All device B beans will be deleted since they are not equal to device A beans")
			#set($dummy = $beansToDelete.addAll(0, $destDeviceBeans))
		#elseif($matchedDestBeansIndex.isEmpty() && !$destDeviceBeans.isEmpty() && $DBG && $bean.get('shouldDelete'))
			#set($dummy = $beansToDelete.addAll(0, $destDeviceBeans))
		#end
		#if($bean.get('shouldDelete') && !$matchedDestBeansIndex.isEmpty() && !$DBG)
			##log("going to delete all spare beans")
			#set($matchedDestBeansIndex = $sorter.sort($matchedDestBeansIndex))
			#foreach($beanB in $destDeviceBeans)
				#if(!$matchedDestBeansIndex.contains($foreach.index))
					#set($dummy = $beansToDelete.add(0, $beanB))
					#if($DBG)
						#log("adding bean - $beanB to delete list")
					#end
				#end
			#end
		#end
	#end 

	#if(!$DBG && !$beansToDelete.isEmpty())
		#log("going to delete all spare beans")
		#foreach($beanToDel in $beansToDelete)
			#deviceapi($destDevice)
				#log("deleting bean - $beanToDel")
				#set($dummy = $destDevice.delete($beanToDel))
			#end
		#end
	#end
#end

#macro(equal, $beana, $beanb, $result, $srcDevice, $destDevice)
	#set($fieldsa = $beana.class.getDeclaredFields())
	#set($valuesa = [])
	#foreach($f in $fieldsa)
		#if(!$fieldsToSkipLowerCase.contains($f.name.toLowerCase()))
			#set($dummy = $f.setAccessible(true))
			#if(!$srcDevice.isNull($f.get($beana)))
                #if($f.name.toLowerCase() == "objipaddr" && $bean.get('name') == "RsProtectedSslObjEntry")
                    #set($dummy = $valuesa.add($ipAddress.addressToString($f.get($beana))))
                #else
                	#set($dummy = $valuesa.add($f.get($beana)))
                #end
			#end        
		#end
	#end
	#set($fieldsb = $beanb.class.getDeclaredFields())
	#set($valuesb = [])
	#foreach($f in $fieldsb)
		#if(!$fieldsToSkipLowerCase.contains($f.name.toLowerCase()))
			#set($dummy = $f.setAccessible(true))
			#if(!$destDevice.isNull($f.get($beanb)))
            	 #if($f.name.toLowerCase() == "objipaddr" && $bean.get('name') == "RsProtectedSslObjEntry")
                 	#set($dummy = $valuesb.add($ipAddress.addressToString($f.get($beanb))))
                 #else
                 	#set($dummy = $valuesb.add($f.get($beanb)))
                 #end
			#end        
		#end
	#end
	#if($valuesa == $valuesb)
		#set($result[0]= true)
	#else
		#set($result[0]= false)
	#end
#end


#macro(createBean, $beanClass, $beanIndexProperties, $beanA, $srcDevice, $destDevice, $DBG)
	#set($newBeanB = $destDevice.newBean($beanClass))
	#if(!$beanIndexProperties.isEmpty())
		#if($DBG)
			#log("index prop is not empty for bean - $beanA")
		#end
		#foreach($entry in $beanIndexProperties.entrySet())
			#set($cmd = '#set($newBeanB.' + $entry.key + '=' + $entry.getValue() + ')')
			#evaluate($cmd)
		#end
	#end
    #log("in createBean Macro for bean $beanA")
	#updateBean($beanA, $newBeanB, $srcDevice, $destDevice, 'create', $DBG)
#end

#macro(updateBean,$beanA,$beanB, $srcDevice, $destDevice, $method, $DBG)
	#log("in updateBean Macro for bean $beanA")										
	##Copying device A bean to Device B bean since vDirect won't send it (Bean A to device B) unless it is considered 'new'.
	#set($setArr = [])
	#set($beanACopyfields = $beanA.getClass().getMethods())
	#foreach($method in $beanACopyfields)
		#if($method.getName().startsWith("set"))
			#set($dummy = $setArr.add($method.getName().substring(3).toLowerCase()))
		#end
	#end
	#set($beanAfields = $beanA.class.getDeclaredFields())
	#foreach($field in $beanAfields)
		#if(!$fieldsToSkipLowerCase.contains($field.name.toLowerCase()) && $setArr.contains($field.name.toLowerCase()))
			#set($dummy = $field.setAccessible(true))
			#if(!$srcDevice.isNull($field.get($beanA)) && $field.get($beanA) != 'null')
            ##log("field type = $field.getType()")
				#if($DBG)
					#log("name = $field.name, value= $field.get($beanA), type = $field.getType()")
				#end
				#if($field.getType().isEnum())
					##enum type field
					#set($dummy = $destDevice.setEnumValue($beanB, "$field.name", "$field.get($beanA)"))
				#elseif($field.getType() == $STRING)
					##string
					#set($cmd = '#set($beanB.' + $field.name + '=' + '"' + $field.get($beanA) + '"' + ')')
					#evaluate($cmd)
				#elseif($field.getType() == $INT)
					## int
					#set($cmd = '#set($beanB.' + $field.name + '=' + $field.get($beanA) + ')')
					#evaluate($cmd)
                #elseif($field.getType() == $BYTE)
                    ## byte array
                    #set($cmd = '#set($beanB.' + $field.name + '=' + '$field.get($beanA)' + ')')
                    #evaluate($cmd)
				#end 
			#end        
		#end
	#end
	#if($beanB.isEmpty() && $DBG)
		#log("Bean is Null - $beanB")
	#elseif($DBG)
		#log("method - $method")
	#end
	#if(!$DBG && !$beanB.isEmpty())
		#deviceapi($destDevice)
			#if($method == 'create')
            	#if($bean.get('name') == "RsBWMNetworkEntry")
					##fetch nwclass compound index
					#set($result = [-1])
					##compoundIndex($destDevice, $beanB.name, $result)
					#checkUnalignedIndex($srcDevice, $destDevice, $beanA, $beanB, $result)
					#set($beanB.subIndex = $result[0])
				#end
                ##log("creating bean - $beanB.toStringEx()")
				#log("creating bean - $beanB")
				#set($dummy = $destDevice.create($beanB))
			#else
            	##log("updating bean - $beanB.toStringEx()")
				#log("updating bean - $beanB")
				#set($dummy = $destDevice.update($beanB))
			#end
		#end
	#end
#end

#macro(checkUnalignedIndex, $srcDevice, $dstDevice, $srcBean, $dstBean, $result)
	#log("in checkUnalignedIndex Macro, checking if network class index are un-aligned for $srcBean ")
	#set($nwClass = $dstDevice.newBean("RsBWMNetworkEntry"))
	#set($nwClass.name = $dstBean.name)
	#set($nwClassBeans = $dstDevice.readAll($nwClass))
	#if($dstDevice.isEmpty($nwClassBeans))
		##set($result[0] = 0)
        #log("dest device has no network class with $nwClass.name")
        #set($result[0] = $srcBean.subIndex)
		#break
	#end
    ##check if source index is free on dest index, if not go to compoundIndex to look for free index
    #set($nwClassId = $dstDevice.newBean("RsBWMNetworkEntry"))
	#set($nwClass.name = $dstBean.name)
    #set($nwClass.subIndex = $srcBean.subIndex)
    #set($nwClassBean = $dstDevice.read($nwClass))
    #if($dstDevice.isEmpty($nwClassBean))
    	#log("dst device has no network class subindex $nwClassBean, creating it with src subindex $nwClass.subIndex")
    	 #set($result[0] = $nwClass.subIndex)
         #break
    #else
    	#log("subindex for network class $nwClass.name is not free, searching for new one.")
    	## go to compound index, src index is not free on dst device
        #compoundIndex($dstDevice, $dstBean.name, $result)
    #end
#end

#macro(compoundIndex, $device, $idA, $result)
	#set($compoundBean = $device.newBean("RsBWMNetworkEntry"))
	#set($compoundBean.name = $idA)
	#set($beans = $device.readAll($compoundBean))
	#if($device.isEmpty($beans))
		#set($result[0] = 0)
		#break
	#end
	#if($beans.size() == 64)
		#error('no more free network classes')
	#end
	#set($subIndexArr = [])
	#foreach ($beanIndex in $beans)
		#set($dummy = $subIndexArr.add($beanIndex.subIndex))
	#end
	#set($dummy = $sorter.sort($subIndexArr))
	#set($lastIndex = $subIndexArr.size() - 1)
	#set($firstFreeCntRuleId = 0)
	#foreach($index in $subIndexArr)
		#if ($index > $firstFreeCntRuleId)
			#set($result[0] = $firstFreeCntRuleId)
			#break
		#elseif ($index == $subIndexArr[$lastIndex])
			#set($firstFreeCntRuleId = $firstFreeCntRuleId + 1)
			#set($result[0] = $firstFreeCntRuleId)
			#break
		#elseif ($firstFreeCntRuleId == $index)
			#set($firstFreeCntRuleId = $firstFreeCntRuleId + 1)
		#end
	#end
#end
