
#set($_DEBUG = false)
#set($_FIELDS_TO_SKIP = ['serialVersionUID','modifiedList'])
#set($_NEEDS_QUOTE = ['String'])
##
## Names validation Start
##
#set($_DEFAULT_MIN_LEN=0)
#set($_DEFAULT_FORBIDDEN_CHARS=[])
#set($REAL_SERVER='real')
#set($NAME='name')
#set($DESC='desc')
#set($_NAMES_CONSTRAINTS={})

#set($nada=$_NAMES_CONSTRAINTS.put($REAL_SERVER,{}))
#set($realConstraints=$_NAMES_CONSTRAINTS.get($REAL_SERVER))
#set($nada=$realConstraints.put($NAME,{'min': 3, 'max' : 12, 'forbiddenChars' : ['z','*']}))
#set($nada=$realConstraints.put($DESC,{'max' : 44}))

##
## Names validation End
##


##---------------------------------------
## Validate name
## $entity - the entity name (String)
## $field - the field name (String)
## $value - the field value (String)
##---------------------------------------
#macro(ps_common_validate_name, $entity, $field, $value)
	#if($entity.class.simpleName != 'String')
		#error("entity must be a String. Current type is $entity.class.simpleName")		
	#end
	#if($field.class.simpleName != 'String')
		#error("field must be a String. Current type is $field.class.simpleName")		
	#end	
	#if($value.class.simpleName != 'String')
		#error("value must be a String. Current type is  $value.class.simpleName")		
	#end
	#set($entry=$_NAMES_CONSTRAINTS.get($entity))
	#if(!$entry)
		#error("There is no entry for entity $entity")		
	#end
	#set($subEntry=$entry.get($field))
	#if(!$subEntry)
		#error("There is no entry for field $field under entity $entity")		
	#end
	#set($max=$subEntry.get('max'))	
	#if(!$max)
		#error("There is no max attribute for field $field under entity $entity")		
	#end		
	#set($min=$subEntry.get('min'))
	#if(!$min)
		#set($min=$_DEFAULT_MIN_LEN)	
	#end	
	#set($forbiddenChars=$subEntry.get('forbiddenChars'))
	#if(!$forbiddenChars)
		#set($forbiddenChars=$_DEFAULT_FORBIDDEN_CHARS)	
	#end
    #if($value.length() > $max)
		#error("The value of field $field under entity $entity is too long: $value.length(). Max length is $max")		
	#end
    #if($value.length() < $min)
		#error("The value of field $field under entity $entity is too short: $value.length(). Min length is $min")		
	#end
	#foreach($char in $forbiddenChars)
		#if($value.contains($char))
			#error("Value $value under $entity | $field contains forbidden char $char")
		#end
	#end	
#end
##---------------------------------------
## Dump bean property
##---------------------------------------
#macro(ps_common_dump, $bean,$dumpNullProperties)
    DBG: $bean.class.simpleName properties:
	#set($fields = $bean.class.getDeclaredFields())
    #foreach($f in $fields)
        #if(!$_FIELDS_TO_SKIP.contains($f.name))
          #set($nada= $f.setAccessible(true))
          #if(!$device.isNull($f.get($bean)))
              DBG: $f.name | $field.getType().simpleName | $f.get($bean)
          #end        
        #end
    #end
    #if($dumpNullProperties)
      #foreach($f in $fields)
          #if(!$_FIELDS_TO_SKIP.contains($f.name))
            #set($nada= $f.setAccessible(true))
            #if($device.isNull($f.get($bean)))
                DBG: $f.name | $field.getType().simpleName | null
            #end        
          #end
      #end    
    #end
#end
##---------------------------------------
## Set bean property - private
##---------------------------------------
#macro(_set_property, $property, $bean, $_result)
    #if($_NEEDS_QUOTE.contains($property.value.class.simpleName))
        #set($field = $bean.class.getDeclaredField($property.key))
        #if($field.getType().isEnum()) 
            #set($nada = $field.setAccessible(true))
            #set($constants = $field.getType().getEnumConstants())
            #set($enumMatch = false)
            #foreach($c in $constants)
            	#if($c.toString() == $property.value)
                    #set($nada = $field.set($bean,$c))
                    #set($enumMatch = true)
                    #break
                #end
            #end
            #if(!$enumMatch)
            	#error("Could not find enum constant from type: $field.getType() using the value: $property.value . Valid values are #foreach($c in $constants) $c.toString() #end ")
            #end
            #set($_result[0] = 'SKIP')
        #else
            #set($_result[0] = '#set($bean.' + $property.key + '=' + '"' + $property.value + '"' + ')')          
        #end
    #else
    	#set($_result[0] = '#set($bean.' + $property.key + '=' +  $property.value + ')')
    #end
#end
##---------------------------------------
## Read List
##---------------------------------------
#macro(ps_common_list, $device, $beanName, $properties, $result)
  #set($bean = $device.newBean($beanName))
  #set($_result=[1])    
  #foreach($property in $properties.entrySet())
    #_set_property($property,$bean,$_result)
    #if($_result[0] != 'SKIP')
    	#evaluate($_result[0])    
    #end
  #end
  #set($result[0] = $device.readAll($bean)) 
#end
##---------------------------------------
## Read One
##---------------------------------------
#macro(ps_common_read, $device, $beanName, $properties, $result)
  #set($bean = $device.newBean($beanName))
  #set($_result=[1])  
  #foreach($property in $properties.entrySet())
    #_set_property($property,$bean, $_result)
    #if($_result[0] != 'SKIP')
    	#evaluate($_result[0])    
    #end
  #end
  #if($_DEBUG)
  	#dump($bean,false)
  #end  
  #set($result[0] = $device.read($bean)) 
#end
##---------------------------------------
## Exists
##---------------------------------------
#macro(ps_common_exists, $device, $beanName, $properties, $result)
	#ps_common_read($device, $beanName, $properties, $result)
    #set($result[0] = !$result[0].empty)
#end
##---------------------------------------
## For each bean (fetch beans from the device and fire a macro for each)
##---------------------------------------
#macro(ps_common_eachBean, $device, $beanName, $properties, $macroName, $args)
    #set($result = [1])
	#list($device, $beanName, $properties, $result)
    #set($macroStr = '#' + $macroName + '($bean, $args)')
    #foreach($bean in $result[0])
    	#evaluate($macroStr)  
	#end
#end

##---------------------------------------
## For each item in list
##---------------------------------------
#macro(ps_common_each, $list, $macroName, $args)
    #set($macroStr = '#' + $macroName + '($item, $args)')
    #foreach($item in $list)
    	#evaluate($macroStr)  
	#end
#end

##---------------------------------------
## Sleep for $num_of_seconds
##---------------------------------------
#macro(ps_common_sleep,$num_of_seconds)
  #set($thread = $class.class.forName('java.lang.Thread'))
  #set($sleep_time=$num_of_seconds * 1000)
  $thread.sleep($sleep_time)
#end

##---------------------------------------
## Returns the bean field value
##---------------------------------------
#macro(ps_common_returnBeanField, $device, $beanName, $property, $result)
  #set($bean = $device.newBean($beanName))
  #set($bean = $device.read($bean))
  #set($field = $bean.class.getDeclaredField($property))
  #set($nada= $field.setAccessible(true))
  #set($result[0] = $field.get($bean))
#end


##---------------------------------------
## Returns the first free index of content rule Id on given virt and service.
##---------------------------------------
#macro(ps_common_firstFreeCntRuleId, $device, $virtId, $virtService, $result)
	#set($bean = $device.newBean('/enh/cfg/slb/virt/service'))
	#set($bean.servIndex = $virtId)
	#set($bean.VirtPort = $virtService)
	#set($readbean = $device.read($bean))
	#set($serviceIndex = $readbean.index)
	#if($device.isEmpty($readbean))
		#error('no such Virt \ Service')
	#end
	##Fetching all content rules under the specificed virt and service.
	#set($bean = $device.newBean("SlbNewCfgEnhContRuleEntry"))
	#set($bean.virtServiceIndex = $serviceIndex)
	#set($bean.virtServIndex = "$virtId")
	#set($beans = $device.readAll($bean))
	#if($device.isEmpty($beans))
		#set($result[0] = 1)
		#break
	#end
	#if($beans.size() == 12800)
		#error('no more free content rules')
	#end
	##fetched all content rules
	## fetching all content rules into one sorted array
	#set($cntRuleArray = [])
	#foreach ($bean in $beans)
		#set($dummy = $cntRuleArray.add($bean.index))
	#end
	#set($dummy = $sorter.sort($cntRuleArray))
	#set($lastIndex = $cntRuleArray.size() - 1)
	#set($firstFreeCntRuleId = 1)
	#foreach($index in $cntRuleArray)
		#if ($index > $firstFreeCntRuleId)
			#set($result[0] = $firstFreeCntRuleId)
			#break
		#elseif ($index == $cntRuleArray[$lastIndex])
			#set($firstFreeCntRuleId = $firstFreeCntRuleId + 1)
			#set($result[0] = $firstFreeCntRuleId)
			#break
		#elseif ($firstFreeCntRuleId == $index)
			#set($firstFreeCntRuleId = $firstFreeCntRuleId + 1)
		#end
	#end
#end